'use strict';

var _ = require('lodash');
var async = require('async');
var util = require('util');
var objectHash = require('object-hash');
var readlineSync = require('readline-sync');
var deepDiff = require('deep-diff').diff;

var buildError = require('../orm/apollo_error');
var schemer = require('../validators/schema');
var parser = require('../utils/parser');
var normalizer = require('../utils/normalizer');

var ElassandraBuilder = require('./elassandra');

var TableBuilder = function f(driver, properties) {
  this._driver = driver;
  this._properties = properties;
  if (this._properties.esclient) {
    this._es_builder = new ElassandraBuilder(this._properties.esclient);
  }
};

TableBuilder.prototype = {
  _confirm_migration(message) {
    var permission = 'y';
    if (message && !this._properties.disableTTYConfirmation) {
      permission = readlineSync.question(util.format('Migration: %s (y/n): ', message));
    }
    return permission.toLowerCase();
  },
  get_table(callback) {
    var properties = this._properties;
    var keyspaceName = properties.keyspace;
    var tableName = properties.table_name;
    var dbSchema = { fields: {}, typeMaps: {}, staticMaps: {} };
    var query = 'SELECT * FROM system_schema.columns WHERE table_name = ? AND keyspace_name = ?;';

    this._driver.execute_query(query, [tableName, keyspaceName], function (err, resultColumns) {
      if (err) {
        callback(buildError('model.tablecreation.dbschemaquery', err));
        return;
      }

      if (!resultColumns.rows || resultColumns.rows.length === 0) {
        callback();
        return;
      }

      for (var r = 0; r < resultColumns.rows.length; r++) {
        var row = resultColumns.rows[r];

        dbSchema.fields[row.column_name] = parser.extract_type(row.type);

        var typeMapDef = parser.extract_typeDef(row.type);
        if (typeMapDef.length > 0) {
          dbSchema.typeMaps[row.column_name] = typeMapDef;
        }

        if (row.kind === 'partition_key') {
          if (!dbSchema.key) dbSchema.key = [[]];
          dbSchema.key[0][row.position] = row.column_name;
        } else if (row.kind === 'clustering') {
          if (!dbSchema.key) dbSchema.key = [[]];
          if (!dbSchema.clustering_order) dbSchema.clustering_order = {};

          dbSchema.key[row.position + 1] = row.column_name;
          if (row.clustering_order && row.clustering_order.toLowerCase() === 'desc') {
            dbSchema.clustering_order[row.column_name] = 'DESC';
          } else {
            dbSchema.clustering_order[row.column_name] = 'ASC';
          }
        } else if (row.kind === 'static') {
          dbSchema.staticMaps[row.column_name] = true;
        }
      }

      callback(null, dbSchema);
    });
  },

  get_table_schema(callback) {
    var _this = this;

    this.get_table(function (err, dbSchema) {
      if (err) {
        callback(err);
        return;
      }
      if (!dbSchema) {
        callback();
        return;
      }
      _this.get_indexes(function (err1, indexSchema) {
        if (err1) {
          callback(err1);
          return;
        }
        _this.get_mviews(indexSchema, function (err2, viewSchema) {
          if (err2) {
            callback(err2);
            return;
          }
          Object.assign(dbSchema, indexSchema, viewSchema);
          callback(null, dbSchema);
        });
      });
    });
  },

  create_table(schema, callback) {
    var properties = this._properties;
    var tableName = properties.table_name;
    var rows = [];
    var fieldType = void 0;
    Object.keys(schema.fields).forEach(function (k) {
      if (schema.fields[k].virtual) {
        return;
      }
      var segment = '';
      fieldType = schemer.get_field_type(schema, k);
      if (schema.fields[k].typeDef) {
        segment = util.format('"%s" %s%s', k, fieldType, schema.fields[k].typeDef);
      } else {
        segment = util.format('"%s" %s', k, fieldType);
      }

      if (schema.fields[k].static) {
        segment += ' STATIC';
      }

      rows.push(segment);
    });

    var clauses = parser.get_primary_key_clauses(schema);

    var query = util.format('CREATE TABLE IF NOT EXISTS "%s" (%s , PRIMARY KEY((%s)%s))%s;', tableName, rows.join(' , '), clauses.partitionKeyClause, clauses.clusteringKeyClause, clauses.clusteringOrderClause);

    this._driver.execute_definition_query(query, function (err, result) {
      if (err) {
        callback(buildError('model.tablecreation.dbcreate', err));
        return;
      }
      callback(null, result);
    });
  },

  alter_table(operation, fieldname, type, callback) {
    var properties = this._properties;
    var tableName = properties.table_name;
    if (operation === 'ALTER') type = util.format('TYPE %s', type);else if (operation === 'DROP') type = '';

    var query = util.format('ALTER TABLE "%s" %s "%s" %s;', tableName, operation, fieldname, type);
    this._driver.execute_definition_query(query, callback);
  },

  _drop_table(tableName, callback) {
    var query = util.format('DROP TABLE IF EXISTS "%s";', tableName);
    this._driver.execute_definition_query(query, function (err) {
      if (err) {
        callback(buildError('model.tablecreation.dbdrop', err));
        return;
      }
      callback();
    });
  },

  drop_table(materializedViews, callback) {
    var _this2 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    var message = util.format('Schema for table "%s" has changed in a way where alter migration is not possible, all data in the table will be lost, are you sure you want to drop the table?', tableName);
    var permission = this._confirm_migration(message);
    if (permission !== 'y') {
      callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
      return;
    }
    if (!materializedViews) {
      this._drop_table(tableName, callback);
      return;
    }

    var mviews = Object.keys(materializedViews);
    this.drop_mviews(mviews, function (err) {
      if (err) {
        callback(err);
        return;
      }

      _this2._drop_table(tableName, callback);
    });
  },

  drop_recreate_table(modelSchema, materializedViews, callback) {
    var _this3 = this;

    if (this._es_builder) {
      var indexName = `${this._properties.keyspace}_${this._properties.table_name}`;
      this._es_builder.delete_index(indexName, function () {
        _this3.drop_table(materializedViews, function (err1) {
          if (err1) {
            callback(err1);
            return;
          }
          _this3.create_table(modelSchema, callback);
        });
      });
      return;
    }
    this.drop_table(materializedViews, function (err1) {
      if (err1) {
        callback(err1);
        return;
      }
      _this3.create_table(modelSchema, callback);
    });
  },

  get_indexes(callback) {
    var properties = this._properties;
    var keyspaceName = properties.keyspace;
    var tableName = properties.table_name;
    var dbSchema = {};
    var query = 'SELECT * FROM system_schema.indexes WHERE table_name = ? AND keyspace_name = ?;';

    this._driver.execute_query(query, [tableName, keyspaceName], function (err, resultIndexes) {
      if (err) {
        callback(buildError('model.tablecreation.dbschemaquery', err));
        return;
      }

      for (var r = 0; r < resultIndexes.rows.length; r++) {
        var row = resultIndexes.rows[r];

        if (row.index_name && row.options.target) {
          var indexOptions = row.options;
          var target = indexOptions.target;
          target = target.replace(/["\s]/g, '');
          delete indexOptions.target;

          // keeping track of index names to drop index when needed
          if (!dbSchema.index_names) dbSchema.index_names = {};

          if (row.kind === 'CUSTOM') {
            var using = indexOptions.class_name;
            delete indexOptions.class_name;

            if (!dbSchema.custom_indexes) dbSchema.custom_indexes = [];
            var customIndexObject = {
              on: target,
              using,
              options: indexOptions
            };
            dbSchema.custom_indexes.push(customIndexObject);
            dbSchema.index_names[objectHash(customIndexObject)] = row.index_name;
          } else {
            if (!dbSchema.indexes) dbSchema.indexes = [];
            dbSchema.indexes.push(target);
            dbSchema.index_names[target] = row.index_name;
          }
        }
      }

      callback(null, dbSchema);
    });
  },

  _create_index_query(tableName, indexName) {
    var query = void 0;
    var indexExpression = indexName.replace(/["\s]/g, '').split(/[()]/g);
    if (indexExpression.length > 1) {
      indexExpression[0] = indexExpression[0].toLowerCase();
      query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" (%s("%s"));', tableName, indexExpression[0], indexExpression[1]);
    } else {
      query = util.format('CREATE INDEX IF NOT EXISTS ON "%s" ("%s");', tableName, indexExpression[0]);
    }
    return query;
  },

  create_indexes(indexes, callback) {
    var _this4 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    async.eachSeries(indexes, function (idx, next) {
      var query = _this4._create_index_query(tableName, idx);
      _this4._driver.execute_definition_query(query, function (err, result) {
        if (err) next(buildError('model.tablecreation.dbindexcreate', err));else next(null, result);
      });
    }, callback);
  },

  _create_custom_index_query(tableName, customIndex) {
    var query = util.format('CREATE CUSTOM INDEX IF NOT EXISTS ON "%s" ("%s") USING \'%s\'', tableName, customIndex.on, customIndex.using);

    if (Object.keys(customIndex.options).length > 0) {
      query += ' WITH OPTIONS = {';
      Object.keys(customIndex.options).forEach(function (key) {
        query += util.format("'%s': '%s', ", key, customIndex.options[key]);
      });
      query = query.slice(0, -2);
      query += '}';
    }

    query += ';';

    return query;
  },

  create_custom_indexes(customIndexes, callback) {
    var _this5 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    async.eachSeries(customIndexes, function (idx, next) {
      var query = _this5._create_custom_index_query(tableName, idx);
      _this5._driver.execute_definition_query(query, function (err, result) {
        if (err) next(buildError('model.tablecreation.dbindexcreate', err));else next(null, result);
      });
    }, callback);
  },

  drop_indexes(indexes, callback) {
    var _this6 = this;

    async.each(indexes, function (idx, next) {
      var query = util.format('DROP INDEX IF EXISTS "%s";', idx);
      _this6._driver.execute_definition_query(query, next);
    }, function (err) {
      if (err) callback(buildError('model.tablecreation.dbindexdrop', err));else callback();
    });
  },

  get_mviews(indexSchema, callback) {
    var _this7 = this;

    var properties = this._properties;
    var keyspaceName = properties.keyspace;
    var tableName = properties.table_name;
    var dbSchema = {};
    var query = 'SELECT view_name,base_table_name,where_clause FROM system_schema.views WHERE keyspace_name=?;';

    this._driver.execute_query(query, [keyspaceName], function (err, resultViews) {
      if (err) {
        callback(buildError('model.tablecreation.dbschemaquery', err));
        return;
      }

      var indexViewNames = [];
      if (indexSchema.index_names) {
        var indexNames = Object.values(indexSchema.index_names);
        indexViewNames = indexNames.map(function (v) {
          return `${v}_index`;
        });
      }

      for (var r = 0; r < resultViews.rows.length; r++) {
        var row = resultViews.rows[r];

        if (row.view_name && row.base_table_name === tableName && !indexViewNames.includes(row.view_name)) {
          if (!dbSchema.materialized_views) dbSchema.materialized_views = {};
          dbSchema.materialized_views[row.view_name] = {
            where_clause: row.where_clause
          };
        }
      }

      if (!dbSchema.materialized_views) {
        callback(null, dbSchema);
        return;
      }

      query = 'SELECT * FROM system_schema.columns WHERE keyspace_name=? and table_name IN ?;';

      var viewNames = Object.keys(dbSchema.materialized_views);
      _this7._driver.execute_query(query, [keyspaceName, viewNames], function (err1, resultMatViews) {
        if (err1) {
          callback(buildError('model.tablecreation.dbschemaquery', err1));
          return;
        }

        for (var _r = 0; _r < resultMatViews.rows.length; _r++) {
          var _row = resultMatViews.rows[_r];

          if (!dbSchema.materialized_views[_row.table_name].select) {
            dbSchema.materialized_views[_row.table_name].select = [];
          }

          dbSchema.materialized_views[_row.table_name].select.push(_row.column_name);

          if (_row.kind === 'partition_key') {
            if (!dbSchema.materialized_views[_row.table_name].key) {
              dbSchema.materialized_views[_row.table_name].key = [[]];
            }

            dbSchema.materialized_views[_row.table_name].key[0][_row.position] = _row.column_name;
          } else if (_row.kind === 'clustering') {
            if (!dbSchema.materialized_views[_row.table_name].key) {
              dbSchema.materialized_views[_row.table_name].key = [[]];
            }
            if (!dbSchema.materialized_views[_row.table_name].clustering_order) {
              dbSchema.materialized_views[_row.table_name].clustering_order = {};
            }

            dbSchema.materialized_views[_row.table_name].key[_row.position + 1] = _row.column_name;
            if (_row.clustering_order && _row.clustering_order.toLowerCase() === 'desc') {
              dbSchema.materialized_views[_row.table_name].clustering_order[_row.column_name] = 'DESC';
            } else {
              dbSchema.materialized_views[_row.table_name].clustering_order[_row.column_name] = 'ASC';
            }
          }
        }

        callback(null, dbSchema);
      });
    });
  },

  _create_materialized_view_query(tableName, viewName, viewSchema) {
    var rows = [];

    for (var k = 0; k < viewSchema.select.length; k++) {
      if (viewSchema.select[k] === '*') rows.push(util.format('%s', viewSchema.select[k]));else rows.push(util.format('"%s"', viewSchema.select[k]));
    }

    var whereClause = viewSchema.where_clause || parser.get_mview_where_clause(this._properties.schema, viewSchema);
    var clauses = parser.get_primary_key_clauses(viewSchema);

    var query = util.format('CREATE MATERIALIZED VIEW IF NOT EXISTS "%s" AS SELECT %s FROM "%s" WHERE %s PRIMARY KEY((%s)%s)%s;', viewName, rows.join(' , '), tableName, whereClause, clauses.partitionKeyClause, clauses.clusteringKeyClause, clauses.clusteringOrderClause);

    return query;
  },

  create_mviews(materializedViews, callback) {
    var _this8 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    async.eachSeries(Object.keys(materializedViews), function (viewName, next) {
      var query = _this8._create_materialized_view_query(tableName, viewName, materializedViews[viewName]);
      _this8._driver.execute_definition_query(query, function (err, result) {
        if (err) next(buildError('model.tablecreation.matviewcreate', err));else next(null, result);
      });
    }, callback);
  },

  drop_mviews(mviews, callback) {
    var _this9 = this;

    async.each(mviews, function (view, next) {
      var query = util.format('DROP MATERIALIZED VIEW IF EXISTS "%s";', view);
      _this9._driver.execute_definition_query(query, next);
    }, function (err) {
      if (err) callback(buildError('model.tablecreation.matviewdrop', err));else callback();
    });
  },

  _apply_alter_operations(alterOperations, dbSchema, normalizedModelSchema, normalizedDBSchema, callback) {
    var _this10 = this;

    // it should create/drop indexes/custom_indexes/materialized_views that are added/removed in model schema
    // remove common indexes/custom_indexes/materialized_views from normalizedModelSchema and normalizedDBSchema
    // then drop all remaining indexes/custom_indexes/materialized_views from normalizedDBSchema
    // and add all remaining indexes/custom_indexes/materialized_views from normalizedModelSchema
    var properties = this._properties;
    var tableName = properties.table_name;
    var addedIndexes = _.difference(normalizedModelSchema.indexes, normalizedDBSchema.indexes);
    var removedIndexes = _.difference(normalizedDBSchema.indexes, normalizedModelSchema.indexes);
    var removedIndexNames = [];
    removedIndexes.forEach(function (removedIndex) {
      removedIndexNames.push(dbSchema.index_names[removedIndex]);
    });

    var addedCustomIndexes = _.filter(normalizedModelSchema.custom_indexes, function (obj) {
      return !_.find(normalizedDBSchema.custom_indexes, obj);
    });
    var removedCustomIndexes = _.filter(normalizedDBSchema.custom_indexes, function (obj) {
      return !_.find(normalizedModelSchema.custom_indexes, obj);
    });
    removedCustomIndexes.forEach(function (removedIndex) {
      removedIndexNames.push(dbSchema.index_names[objectHash(removedIndex)]);
    });

    var addedMaterializedViewsNames = _.filter(Object.keys(normalizedModelSchema.materialized_views), function (viewName) {
      return !_.isEqual(normalizedDBSchema.materialized_views[viewName], normalizedModelSchema.materialized_views[viewName]);
    });

    var removedMaterializedViewNames = _.filter(Object.keys(normalizedDBSchema.materialized_views), function (viewName) {
      return !_.isEqual(normalizedDBSchema.materialized_views[viewName], normalizedModelSchema.materialized_views[viewName]);
    });

    var addedMaterializedViews = {};
    addedMaterializedViewsNames.forEach(function (viewName) {
      addedMaterializedViews[viewName] = normalizedModelSchema.materialized_views[viewName];
    });

    // remove altered materialized views
    if (removedMaterializedViewNames.length > 0) {
      var message = util.format('Schema for table "%s" has removed materialized_views: %j, are you sure you want to drop them?', tableName, removedMaterializedViewNames);
      var permission = this._confirm_migration(message);
      if (permission !== 'y') {
        callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
        return;
      }
    }

    this.drop_mviews(removedMaterializedViewNames, function (err2) {
      if (err2) {
        callback(err2);
        return;
      }

      if (removedIndexNames.length > 0) {
        var _message = util.format('Schema for table "%s" has removed indexes: %j, are you sure you want to drop them?', tableName, removedIndexNames);
        var _permission = _this10._confirm_migration(_message);
        if (_permission !== 'y') {
          callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
          return;
        }
      }

      // remove altered indexes by index name
      _this10.drop_indexes(removedIndexNames, function (err3) {
        if (err3) {
          callback(err3);
          return;
        }

        // now apply alterOperations here
        async.eachSeries(alterOperations, function (alterOperation, next) {
          var permission = _this10._confirm_migration(alterOperation.message);
          if (permission !== 'y') {
            callback(buildError('model.tablecreation.schemamismatch', tableName, 'migration suspended, please apply the change manually'));
            return;
          }
          _this10.alter_table(alterOperation.operation, alterOperation.fieldName, alterOperation.type, next);
        }, function (err4) {
          if (err4) {
            callback(err4);
            return;
          }

          // add altered indexes
          // eslint-disable-next-line max-nested-callbacks
          _this10.create_indexes(addedIndexes, function (err5) {
            if (err5) {
              callback(err5);
              return;
            }

            // add altered custom indexes
            // eslint-disable-next-line max-nested-callbacks
            _this10.create_custom_indexes(addedCustomIndexes, function (err6) {
              if (err6) {
                callback(err6);
                return;
              }

              // add altered materialized_views
              _this10.create_mviews(addedMaterializedViews, callback);
            });
          });
        });
      });
    });
  },

  init_alter_operations(modelSchema, dbSchema, normalizedModelSchema, normalizedDBSchema, callback) {
    var _this11 = this;

    var properties = this._properties;
    var tableName = properties.table_name;
    var alterOperations = [];
    var differences = deepDiff(normalizedDBSchema.fields, normalizedModelSchema.fields);
    var droppedFields = false;
    async.eachSeries(differences, function (diff, next) {
      var fieldName = diff.path[0];
      if (diff.kind === 'N') {
        var message = util.format('Schema for table "%s" has added field "%s", are you sure you want to alter to add the field?', tableName, fieldName);
        alterOperations.push({
          fieldName,
          message,
          operation: 'ADD',
          type: parser.extract_altered_type(normalizedModelSchema, diff)
        });
        next();
        return;
      }
      if (diff.kind === 'D') {
        var _message2 = util.format('Schema for table "%s" has removed field "%s", all data in the field will lost, are you sure you want to alter to drop the field?', tableName, fieldName);
        alterOperations.push({
          fieldName,
          message: _message2,
          operation: 'DROP'
        });
        droppedFields = true;
        normalizer.remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName);
        next();
        return;
      }
      if (diff.kind === 'E') {
        // check if the alter field type is possible, otherwise try D and then N
        if (diff.path[1] === 'type') {
          // check if field part of primary key
          if (normalizedDBSchema.key[0].includes(fieldName) || normalizedDBSchema.key.indexOf(fieldName) > 0) {
            // alter field type impossible
            next(new Error('alter_impossible'));
          } else if (['text', 'ascii', 'bigint', 'boolean', 'decimal', 'double', 'float', 'inet', 'int', 'timestamp', 'timeuuid', 'uuid', 'varchar', 'varint'].includes(diff.lhs) && diff.rhs === 'blob') {
            // alter field type possible
            var _message3 = util.format('Schema for table "%s" has new type for field "%s", are you sure you want to alter to update the field type?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message3,
              operation: 'ALTER',
              type: diff.rhs
            });
            next();
          } else if (diff.lhs === 'int' && diff.rhs === 'varint') {
            // alter field type possible
            var _message4 = util.format('Schema for table "%s" has new type for field "%s", are you sure you want to alter to update the field type?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message4,
              operation: 'ALTER',
              type: diff.rhs
            });
            next();
          } else if (diff.lhs === 'timeuuid' && diff.rhs === 'uuid') {
            // alter field type possible
            var _message5 = util.format('Schema for table "%s" has new type for field "%s", are you sure you want to alter to update the field type?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message5,
              operation: 'ALTER',
              type: diff.rhs
            });
            next();
          } else {
            // alter type impossible
            var _message6 = util.format('Schema for table "%s" has new type for field "%s", all data in the field will be lost, are you sure you want to drop the field & recreate it?', tableName, fieldName);
            alterOperations.push({
              fieldName,
              message: _message6,
              operation: 'DROP'
            });
            alterOperations.push({
              fieldName,
              operation: 'ADD',
              type: parser.extract_altered_type(normalizedModelSchema, diff)
            });
            droppedFields = true;
            normalizer.remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName);
            next();
          }
        } else {
          // alter type impossible
          var _message7 = util.format('Schema for table "%s" has new type for field "%s", all data in the field will be lost, are you sure you want to drop the field & recreate it?', tableName, fieldName);
          alterOperations.push({
            fieldName,
            message: _message7,
            operation: 'DROP'
          });
          alterOperations.push({
            fieldName,
            operation: 'ADD',
            type: parser.extract_altered_type(normalizedModelSchema, diff)
          });
          droppedFields = true;
          normalizer.remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName);
          next();
        }
        return;
      }

      next();
    }, function (err) {
      if (err) {
        callback(err);
        return;
      }
      if (droppedFields && _this11._es_builder) {
        var indexName = `${properties.keyspace}_${properties.table_name}`;
        _this11._es_builder.delete_index(indexName, function () {
          _this11._apply_alter_operations(alterOperations, dbSchema, normalizedModelSchema, normalizedDBSchema, callback);
        });
        return;
      }
      _this11._apply_alter_operations(alterOperations, dbSchema, normalizedModelSchema, normalizedDBSchema, callback);
    });
  }
};

module.exports = TableBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy90YWJsZS5qcyJdLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImFzeW5jIiwidXRpbCIsIm9iamVjdEhhc2giLCJyZWFkbGluZVN5bmMiLCJkZWVwRGlmZiIsImRpZmYiLCJidWlsZEVycm9yIiwic2NoZW1lciIsInBhcnNlciIsIm5vcm1hbGl6ZXIiLCJFbGFzc2FuZHJhQnVpbGRlciIsIlRhYmxlQnVpbGRlciIsImYiLCJkcml2ZXIiLCJwcm9wZXJ0aWVzIiwiX2RyaXZlciIsIl9wcm9wZXJ0aWVzIiwiZXNjbGllbnQiLCJfZXNfYnVpbGRlciIsInByb3RvdHlwZSIsIl9jb25maXJtX21pZ3JhdGlvbiIsIm1lc3NhZ2UiLCJwZXJtaXNzaW9uIiwiZGlzYWJsZVRUWUNvbmZpcm1hdGlvbiIsInF1ZXN0aW9uIiwiZm9ybWF0IiwidG9Mb3dlckNhc2UiLCJnZXRfdGFibGUiLCJjYWxsYmFjayIsImtleXNwYWNlTmFtZSIsImtleXNwYWNlIiwidGFibGVOYW1lIiwidGFibGVfbmFtZSIsImRiU2NoZW1hIiwiZmllbGRzIiwidHlwZU1hcHMiLCJzdGF0aWNNYXBzIiwicXVlcnkiLCJleGVjdXRlX3F1ZXJ5IiwiZXJyIiwicmVzdWx0Q29sdW1ucyIsInJvd3MiLCJsZW5ndGgiLCJyIiwicm93IiwiY29sdW1uX25hbWUiLCJleHRyYWN0X3R5cGUiLCJ0eXBlIiwidHlwZU1hcERlZiIsImV4dHJhY3RfdHlwZURlZiIsImtpbmQiLCJrZXkiLCJwb3NpdGlvbiIsImNsdXN0ZXJpbmdfb3JkZXIiLCJnZXRfdGFibGVfc2NoZW1hIiwiZ2V0X2luZGV4ZXMiLCJlcnIxIiwiaW5kZXhTY2hlbWEiLCJnZXRfbXZpZXdzIiwiZXJyMiIsInZpZXdTY2hlbWEiLCJPYmplY3QiLCJhc3NpZ24iLCJjcmVhdGVfdGFibGUiLCJzY2hlbWEiLCJmaWVsZFR5cGUiLCJrZXlzIiwiZm9yRWFjaCIsImsiLCJ2aXJ0dWFsIiwic2VnbWVudCIsImdldF9maWVsZF90eXBlIiwidHlwZURlZiIsInN0YXRpYyIsInB1c2giLCJjbGF1c2VzIiwiZ2V0X3ByaW1hcnlfa2V5X2NsYXVzZXMiLCJqb2luIiwicGFydGl0aW9uS2V5Q2xhdXNlIiwiY2x1c3RlcmluZ0tleUNsYXVzZSIsImNsdXN0ZXJpbmdPcmRlckNsYXVzZSIsImV4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeSIsInJlc3VsdCIsImFsdGVyX3RhYmxlIiwib3BlcmF0aW9uIiwiZmllbGRuYW1lIiwiX2Ryb3BfdGFibGUiLCJkcm9wX3RhYmxlIiwibWF0ZXJpYWxpemVkVmlld3MiLCJtdmlld3MiLCJkcm9wX212aWV3cyIsImRyb3BfcmVjcmVhdGVfdGFibGUiLCJtb2RlbFNjaGVtYSIsImluZGV4TmFtZSIsImRlbGV0ZV9pbmRleCIsInJlc3VsdEluZGV4ZXMiLCJpbmRleF9uYW1lIiwib3B0aW9ucyIsInRhcmdldCIsImluZGV4T3B0aW9ucyIsInJlcGxhY2UiLCJpbmRleF9uYW1lcyIsInVzaW5nIiwiY2xhc3NfbmFtZSIsImN1c3RvbV9pbmRleGVzIiwiY3VzdG9tSW5kZXhPYmplY3QiLCJvbiIsImluZGV4ZXMiLCJfY3JlYXRlX2luZGV4X3F1ZXJ5IiwiaW5kZXhFeHByZXNzaW9uIiwic3BsaXQiLCJjcmVhdGVfaW5kZXhlcyIsImVhY2hTZXJpZXMiLCJpZHgiLCJuZXh0IiwiX2NyZWF0ZV9jdXN0b21faW5kZXhfcXVlcnkiLCJjdXN0b21JbmRleCIsInNsaWNlIiwiY3JlYXRlX2N1c3RvbV9pbmRleGVzIiwiY3VzdG9tSW5kZXhlcyIsImRyb3BfaW5kZXhlcyIsImVhY2giLCJyZXN1bHRWaWV3cyIsImluZGV4Vmlld05hbWVzIiwiaW5kZXhOYW1lcyIsInZhbHVlcyIsIm1hcCIsInYiLCJ2aWV3X25hbWUiLCJiYXNlX3RhYmxlX25hbWUiLCJpbmNsdWRlcyIsIm1hdGVyaWFsaXplZF92aWV3cyIsIndoZXJlX2NsYXVzZSIsInZpZXdOYW1lcyIsInJlc3VsdE1hdFZpZXdzIiwic2VsZWN0IiwiX2NyZWF0ZV9tYXRlcmlhbGl6ZWRfdmlld19xdWVyeSIsInZpZXdOYW1lIiwid2hlcmVDbGF1c2UiLCJnZXRfbXZpZXdfd2hlcmVfY2xhdXNlIiwiY3JlYXRlX212aWV3cyIsInZpZXciLCJfYXBwbHlfYWx0ZXJfb3BlcmF0aW9ucyIsImFsdGVyT3BlcmF0aW9ucyIsIm5vcm1hbGl6ZWRNb2RlbFNjaGVtYSIsIm5vcm1hbGl6ZWREQlNjaGVtYSIsImFkZGVkSW5kZXhlcyIsImRpZmZlcmVuY2UiLCJyZW1vdmVkSW5kZXhlcyIsInJlbW92ZWRJbmRleE5hbWVzIiwicmVtb3ZlZEluZGV4IiwiYWRkZWRDdXN0b21JbmRleGVzIiwiZmlsdGVyIiwib2JqIiwiZmluZCIsInJlbW92ZWRDdXN0b21JbmRleGVzIiwiYWRkZWRNYXRlcmlhbGl6ZWRWaWV3c05hbWVzIiwiaXNFcXVhbCIsInJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3TmFtZXMiLCJhZGRlZE1hdGVyaWFsaXplZFZpZXdzIiwiZXJyMyIsImFsdGVyT3BlcmF0aW9uIiwiZmllbGROYW1lIiwiZXJyNCIsImVycjUiLCJlcnI2IiwiaW5pdF9hbHRlcl9vcGVyYXRpb25zIiwiZGlmZmVyZW5jZXMiLCJkcm9wcGVkRmllbGRzIiwicGF0aCIsImV4dHJhY3RfYWx0ZXJlZF90eXBlIiwicmVtb3ZlX2RlcGVuZGVudF92aWV3c19mcm9tX25vcm1hbGl6ZWRfc2NoZW1hIiwiaW5kZXhPZiIsIkVycm9yIiwibGhzIiwicmhzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxJQUFJQyxRQUFRLFFBQVIsQ0FBVjtBQUNBLElBQU1DLFFBQVFELFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTUUsT0FBT0YsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNRyxhQUFhSCxRQUFRLGFBQVIsQ0FBbkI7QUFDQSxJQUFNSSxlQUFlSixRQUFRLGVBQVIsQ0FBckI7QUFDQSxJQUFNSyxXQUFXTCxRQUFRLFdBQVIsRUFBcUJNLElBQXRDOztBQUVBLElBQU1DLGFB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Z0JyRSxJQUFoQixDQUFxQjtBQUNuQndGLHFCQURtQjtBQUVuQjlFLHVCQUFXLEtBRlE7QUFHbkJyQyxrQkFBTXZDLE9BQU9rSyxvQkFBUCxDQUE0QjFCLHFCQUE1QixFQUFtRDNJLElBQW5EO0FBSGEsV0FBckI7QUFLQW1LLDBCQUFnQixJQUFoQjtBQUNBL0oscUJBQVdrSyw2Q0FBWCxDQUF5RDFCLGtCQUF6RCxFQUE2RWhILFFBQTdFLEVBQXVGaUksU0FBdkY7QUFDQWhEO0FBQ0Q7QUFDRDtBQUNEOztBQUVEQTtBQUNELEtBbElELEVBa0lHLFVBQUMzRSxHQUFELEVBQVM7QUFDVixVQUFJQSxHQUFKLEVBQVM7QUFDUFgsaUJBQVNXLEdBQVQ7QUFDQTtBQUNEO0FBQ0QsVUFBSWlJLGlCQUFpQixRQUFLdEosV0FBMUIsRUFBdUM7QUFDckMsWUFBTTJFLFlBQWEsR0FBRS9FLFdBQVdnQixRQUFTLElBQUdoQixXQUFXa0IsVUFBVyxFQUFsRTtBQUNBLGdCQUFLZCxXQUFMLENBQWlCNEUsWUFBakIsQ0FBOEJELFNBQTlCLEVBQXlDLFlBQU07QUFDN0Msa0JBQUtpRCx1QkFBTCxDQUE2QkMsZUFBN0IsRUFBOEM5RyxRQUE5QyxFQUF3RCtHLHFCQUF4RCxFQUErRUMsa0JBQS9FLEVBQW1HckgsUUFBbkc7QUFDRCxTQUZEO0FBR0E7QUFDRDtBQUNELGNBQUtrSCx1QkFBTCxDQUE2QkMsZUFBN0IsRUFBOEM5RyxRQUE5QyxFQUF3RCtHLHFCQUF4RCxFQUErRUMsa0JBQS9FLEVBQW1HckgsUUFBbkc7QUFDRCxLQS9JRDtBQWdKRDtBQS90QnNCLENBQXpCOztBQWt1QkFvSixPQUFPQyxPQUFQLEdBQWlCdEssWUFBakIiLCJmaWxlIjoidGFibGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3Qgb2JqZWN0SGFzaCA9IHJlcXVpcmUoJ29iamVjdC1oYXNoJyk7XG5jb25zdCByZWFkbGluZVN5bmMgPSByZXF1aXJlKCdyZWFkbGluZS1zeW5jJyk7XG5jb25zdCBkZWVwRGlmZiA9IHJlcXVpcmUoJ2RlZXAtZGlmZicpLmRpZmY7XG5cbmNvbnN0IGJ1aWxkRXJyb3IgPSByZXF1aXJlKCcuLi9vcm0vYXBvbGxvX2Vycm9yJyk7XG5jb25zdCBzY2hlbWVyID0gcmVxdWlyZSgnLi4vdmFsaWRhdG9ycy9zY2hlbWEnKTtcbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoJy4uL3V0aWxzL3BhcnNlcicpO1xuY29uc3Qgbm9ybWFsaXplciA9IHJlcXVpcmUoJy4uL3V0aWxzL25vcm1hbGl6ZXInKTtcblxuY29uc3QgRWxhc3NhbmRyYUJ1aWxkZXIgPSByZXF1aXJlKCcuL2VsYXNzYW5kcmEnKTtcblxuY29uc3QgVGFibGVCdWlsZGVyID0gZnVuY3Rpb24gZihkcml2ZXIsIHByb3BlcnRpZXMpIHtcbiAgdGhpcy5fZHJpdmVyID0gZHJpdmVyO1xuICB0aGlzLl9wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcbiAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuZXNjbGllbnQpIHtcbiAgICB0aGlzLl9lc19idWlsZGVyID0gbmV3IEVsYXNzYW5kcmFCdWlsZGVyKHRoaXMuX3Byb3BlcnRpZXMuZXNjbGllbnQpO1xuICB9XG59O1xuXG5UYWJsZUJ1aWxkZXIucHJvdG90eXBlID0ge1xuICBfY29uZmlybV9taWdyYXRpb24obWVzc2FnZSkge1xuICAgIGxldCBwZXJtaXNzaW9uID0gJ3knO1xuICAgIGlmIChtZXNzYWdlICYmICF0aGlzLl9wcm9wZXJ0aWVzLmRpc2FibGVUVFlDb25maXJtYXRpb24pIHtcbiAgICAgIHBlcm1pc3Npb24gPSByZWFkbGluZVN5bmMucXVlc3Rpb24odXRpbC5mb3JtYXQoJ01pZ3JhdGlvbjogJXMgKHkvbik6ICcsIG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBlcm1pc3Npb24udG9Mb3dlckNhc2UoKTtcbiAgfSxcbiAgZ2V0X3RhYmxlKGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3Qga2V5c3BhY2VOYW1lID0gcHJvcGVydGllcy5rZXlzcGFjZTtcbiAgICBjb25zdCB0YWJsZU5hbWUgPSBwcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG4gICAgY29uc3QgZGJTY2hlbWEgPSB7IGZpZWxkczoge30sIHR5cGVNYXBzOiB7fSwgc3RhdGljTWFwczoge30gfTtcbiAgICBjb25zdCBxdWVyeSA9ICdTRUxFQ1QgKiBGUk9NIHN5c3RlbV9zY2hlbWEuY29sdW1ucyBXSEVSRSB0YWJsZV9uYW1lID0gPyBBTkQga2V5c3BhY2VfbmFtZSA9ID87JztcblxuICAgIHRoaXMuX2RyaXZlci5leGVjdXRlX3F1ZXJ5KHF1ZXJ5LCBbdGFibGVOYW1lLCBrZXlzcGFjZU5hbWVdLCAoZXJyLCByZXN1bHRDb2x1bW5zKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJzY2hlbWFxdWVyeScsIGVycikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzdWx0Q29sdW1ucy5yb3dzIHx8IHJlc3VsdENvbHVtbnMucm93cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCByID0gMDsgciA8IHJlc3VsdENvbHVtbnMucm93cy5sZW5ndGg7IHIrKykge1xuICAgICAgICBjb25zdCByb3cgPSByZXN1bHRDb2x1bW5zLnJvd3Nbcl07XG5cbiAgICAgICAgZGJTY2hlbWEuZmllbGRzW3Jvdy5jb2x1bW5fbmFtZV0gPSBwYXJzZXIuZXh0cmFjdF90eXBlKHJvdy50eXBlKTtcblxuICAgICAgICBjb25zdCB0eXBlTWFwRGVmID0gcGFyc2VyLmV4dHJhY3RfdHlwZURlZihyb3cudHlwZSk7XG4gICAgICAgIGlmICh0eXBlTWFwRGVmLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBkYlNjaGVtYS50eXBlTWFwc1tyb3cuY29sdW1uX25hbWVdID0gdHlwZU1hcERlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3cua2luZCA9PT0gJ3BhcnRpdGlvbl9rZXknKSB7XG4gICAgICAgICAgaWYgKCFkYlNjaGVtYS5rZXkpIGRiU2NoZW1hLmtleSA9IFtbXV07XG4gICAgICAgICAgZGJTY2hlbWEua2V5WzBdW3Jvdy5wb3NpdGlvbl0gPSByb3cuY29sdW1uX25hbWU7XG4gICAgICAgIH0gZWxzZSBpZiAocm93LmtpbmQgPT09ICdjbHVzdGVyaW5nJykge1xuICAgICAgICAgIGlmICghZGJTY2hlbWEua2V5KSBkYlNjaGVtYS5rZXkgPSBbW11dO1xuICAgICAgICAgIGlmICghZGJTY2hlbWEuY2x1c3RlcmluZ19vcmRlcikgZGJTY2hlbWEuY2x1c3RlcmluZ19vcmRlciA9IHt9O1xuXG4gICAgICAgICAgZGJTY2hlbWEua2V5W3Jvdy5wb3NpdGlvbiArIDFdID0gcm93LmNvbHVtbl9uYW1lO1xuICAgICAgICAgIGlmIChyb3cuY2x1c3RlcmluZ19vcmRlciAmJiByb3cuY2x1c3RlcmluZ19vcmRlci50b0xvd2VyQ2FzZSgpID09PSAnZGVzYycpIHtcbiAgICAgICAgICAgIGRiU2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbcm93LmNvbHVtbl9uYW1lXSA9ICdERVNDJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGJTY2hlbWEuY2x1c3RlcmluZ19vcmRlcltyb3cuY29sdW1uX25hbWVdID0gJ0FTQyc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJvdy5raW5kID09PSAnc3RhdGljJykge1xuICAgICAgICAgIGRiU2NoZW1hLnN0YXRpY01hcHNbcm93LmNvbHVtbl9uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2FsbGJhY2sobnVsbCwgZGJTY2hlbWEpO1xuICAgIH0pO1xuICB9LFxuXG4gIGdldF90YWJsZV9zY2hlbWEoY2FsbGJhY2spIHtcbiAgICB0aGlzLmdldF90YWJsZSgoZXJyLCBkYlNjaGVtYSkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIWRiU2NoZW1hKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ2V0X2luZGV4ZXMoKGVycjEsIGluZGV4U2NoZW1hKSA9PiB7XG4gICAgICAgIGlmIChlcnIxKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0X212aWV3cyhpbmRleFNjaGVtYSwgKGVycjIsIHZpZXdTY2hlbWEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyMikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyMik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIE9iamVjdC5hc3NpZ24oZGJTY2hlbWEsIGluZGV4U2NoZW1hLCB2aWV3U2NoZW1hKTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCBkYlNjaGVtYSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgY3JlYXRlX3RhYmxlKHNjaGVtYSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCB0YWJsZU5hbWUgPSBwcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG4gICAgY29uc3Qgcm93cyA9IFtdO1xuICAgIGxldCBmaWVsZFR5cGU7XG4gICAgT2JqZWN0LmtleXMoc2NoZW1hLmZpZWxkcykuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgaWYgKHNjaGVtYS5maWVsZHNba10udmlydHVhbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgc2VnbWVudCA9ICcnO1xuICAgICAgZmllbGRUeXBlID0gc2NoZW1lci5nZXRfZmllbGRfdHlwZShzY2hlbWEsIGspO1xuICAgICAgaWYgKHNjaGVtYS5maWVsZHNba10udHlwZURlZikge1xuICAgICAgICBzZWdtZW50ID0gdXRpbC5mb3JtYXQoJ1wiJXNcIiAlcyVzJywgaywgZmllbGRUeXBlLCBzY2hlbWEuZmllbGRzW2tdLnR5cGVEZWYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VnbWVudCA9IHV0aWwuZm9ybWF0KCdcIiVzXCIgJXMnLCBrLCBmaWVsZFR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NoZW1hLmZpZWxkc1trXS5zdGF0aWMpIHtcbiAgICAgICAgc2VnbWVudCArPSAnIFNUQVRJQyc7XG4gICAgICB9XG5cbiAgICAgIHJvd3MucHVzaChzZWdtZW50KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsYXVzZXMgPSBwYXJzZXIuZ2V0X3ByaW1hcnlfa2V5X2NsYXVzZXMoc2NoZW1hKTtcblxuICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICAnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgXCIlc1wiICglcyAsIFBSSU1BUlkgS0VZKCglcyklcykpJXM7JyxcbiAgICAgIHRhYmxlTmFtZSxcbiAgICAgIHJvd3Muam9pbignICwgJyksXG4gICAgICBjbGF1c2VzLnBhcnRpdGlvbktleUNsYXVzZSxcbiAgICAgIGNsYXVzZXMuY2x1c3RlcmluZ0tleUNsYXVzZSxcbiAgICAgIGNsYXVzZXMuY2x1c3RlcmluZ09yZGVyQ2xhdXNlLFxuICAgICk7XG5cbiAgICB0aGlzLl9kcml2ZXIuZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmNyZWF0ZScsIGVycikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgIH0pO1xuICB9LFxuXG4gIGFsdGVyX3RhYmxlKG9wZXJhdGlvbiwgZmllbGRuYW1lLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHByb3BlcnRpZXMudGFibGVfbmFtZTtcbiAgICBpZiAob3BlcmF0aW9uID09PSAnQUxURVInKSB0eXBlID0gdXRpbC5mb3JtYXQoJ1RZUEUgJXMnLCB0eXBlKTtcbiAgICBlbHNlIGlmIChvcGVyYXRpb24gPT09ICdEUk9QJykgdHlwZSA9ICcnO1xuXG4gICAgY29uc3QgcXVlcnkgPSB1dGlsLmZvcm1hdCgnQUxURVIgVEFCTEUgXCIlc1wiICVzIFwiJXNcIiAlczsnLCB0YWJsZU5hbWUsIG9wZXJhdGlvbiwgZmllbGRuYW1lLCB0eXBlKTtcbiAgICB0aGlzLl9kcml2ZXIuZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgX2Ryb3BfdGFibGUodGFibGVOYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoJ0RST1AgVEFCTEUgSUYgRVhJU1RTIFwiJXNcIjsnLCB0YWJsZU5hbWUpO1xuICAgIHRoaXMuX2RyaXZlci5leGVjdXRlX2RlZmluaXRpb25fcXVlcnkocXVlcnksIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmRyb3AnLCBlcnIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSxcblxuICBkcm9wX3RhYmxlKG1hdGVyaWFsaXplZFZpZXdzLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHByb3BlcnRpZXMudGFibGVfbmFtZTtcbiAgICBjb25zdCBtZXNzYWdlID0gdXRpbC5mb3JtYXQoXG4gICAgICAnU2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIGNoYW5nZWQgaW4gYSB3YXkgd2hlcmUgYWx0ZXIgbWlncmF0aW9uIGlzIG5vdCBwb3NzaWJsZSwgYWxsIGRhdGEgaW4gdGhlIHRhYmxlIHdpbGwgYmUgbG9zdCwgYXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRyb3AgdGhlIHRhYmxlPycsXG4gICAgICB0YWJsZU5hbWUsXG4gICAgKTtcbiAgICBjb25zdCBwZXJtaXNzaW9uID0gdGhpcy5fY29uZmlybV9taWdyYXRpb24obWVzc2FnZSk7XG4gICAgaWYgKHBlcm1pc3Npb24gIT09ICd5Jykge1xuICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSwgJ21pZ3JhdGlvbiBzdXNwZW5kZWQsIHBsZWFzZSBhcHBseSB0aGUgY2hhbmdlIG1hbnVhbGx5JykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW1hdGVyaWFsaXplZFZpZXdzKSB7XG4gICAgICB0aGlzLl9kcm9wX3RhYmxlKHRhYmxlTmFtZSwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG12aWV3cyA9IE9iamVjdC5rZXlzKG1hdGVyaWFsaXplZFZpZXdzKTtcbiAgICB0aGlzLmRyb3BfbXZpZXdzKG12aWV3cywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Ryb3BfdGFibGUodGFibGVOYW1lLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZHJvcF9yZWNyZWF0ZV90YWJsZShtb2RlbFNjaGVtYSwgbWF0ZXJpYWxpemVkVmlld3MsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuX2VzX2J1aWxkZXIpIHtcbiAgICAgIGNvbnN0IGluZGV4TmFtZSA9IGAke3RoaXMuX3Byb3BlcnRpZXMua2V5c3BhY2V9XyR7dGhpcy5fcHJvcGVydGllcy50YWJsZV9uYW1lfWA7XG4gICAgICB0aGlzLl9lc19idWlsZGVyLmRlbGV0ZV9pbmRleChpbmRleE5hbWUsICgpID0+IHtcbiAgICAgICAgdGhpcy5kcm9wX3RhYmxlKG1hdGVyaWFsaXplZFZpZXdzLCAoZXJyMSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIxKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5jcmVhdGVfdGFibGUobW9kZWxTY2hlbWEsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kcm9wX3RhYmxlKG1hdGVyaWFsaXplZFZpZXdzLCAoZXJyMSkgPT4ge1xuICAgICAgaWYgKGVycjEpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyMSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY3JlYXRlX3RhYmxlKG1vZGVsU2NoZW1hLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH0sXG5cbiAgZ2V0X2luZGV4ZXMoY2FsbGJhY2spIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCBrZXlzcGFjZU5hbWUgPSBwcm9wZXJ0aWVzLmtleXNwYWNlO1xuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHByb3BlcnRpZXMudGFibGVfbmFtZTtcbiAgICBjb25zdCBkYlNjaGVtYSA9IHt9O1xuICAgIGNvbnN0IHF1ZXJ5ID0gJ1NFTEVDVCAqIEZST00gc3lzdGVtX3NjaGVtYS5pbmRleGVzIFdIRVJFIHRhYmxlX25hbWUgPSA/IEFORCBrZXlzcGFjZV9uYW1lID0gPzsnO1xuXG4gICAgdGhpcy5fZHJpdmVyLmV4ZWN1dGVfcXVlcnkocXVlcnksIFt0YWJsZU5hbWUsIGtleXNwYWNlTmFtZV0sIChlcnIsIHJlc3VsdEluZGV4ZXMpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYnNjaGVtYXF1ZXJ5JywgZXJyKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCByZXN1bHRJbmRleGVzLnJvd3MubGVuZ3RoOyByKyspIHtcbiAgICAgICAgY29uc3Qgcm93ID0gcmVzdWx0SW5kZXhlcy5yb3dzW3JdO1xuXG4gICAgICAgIGlmIChyb3cuaW5kZXhfbmFtZSAmJiByb3cub3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgICBjb25zdCBpbmRleE9wdGlvbnMgPSByb3cub3B0aW9ucztcbiAgICAgICAgICBsZXQgdGFyZ2V0ID0gaW5kZXhPcHRpb25zLnRhcmdldDtcbiAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQucmVwbGFjZSgvW1wiXFxzXS9nLCAnJyk7XG4gICAgICAgICAgZGVsZXRlIGluZGV4T3B0aW9ucy50YXJnZXQ7XG5cbiAgICAgICAgICAvLyBrZWVwaW5nIHRyYWNrIG9mIGluZGV4IG5hbWVzIHRvIGRyb3AgaW5kZXggd2hlbiBuZWVkZWRcbiAgICAgICAgICBpZiAoIWRiU2NoZW1hLmluZGV4X25hbWVzKSBkYlNjaGVtYS5pbmRleF9uYW1lcyA9IHt9O1xuXG4gICAgICAgICAgaWYgKHJvdy5raW5kID09PSAnQ1VTVE9NJykge1xuICAgICAgICAgICAgY29uc3QgdXNpbmcgPSBpbmRleE9wdGlvbnMuY2xhc3NfbmFtZTtcbiAgICAgICAgICAgIGRlbGV0ZSBpbmRleE9wdGlvbnMuY2xhc3NfbmFtZTtcblxuICAgICAgICAgICAgaWYgKCFkYlNjaGVtYS5jdXN0b21faW5kZXhlcykgZGJTY2hlbWEuY3VzdG9tX2luZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGN1c3RvbUluZGV4T2JqZWN0ID0ge1xuICAgICAgICAgICAgICBvbjogdGFyZ2V0LFxuICAgICAgICAgICAgICB1c2luZyxcbiAgICAgICAgICAgICAgb3B0aW9uczogaW5kZXhPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRiU2NoZW1hLmN1c3RvbV9pbmRleGVzLnB1c2goY3VzdG9tSW5kZXhPYmplY3QpO1xuICAgICAgICAgICAgZGJTY2hlbWEuaW5kZXhfbmFtZXNbb2JqZWN0SGFzaChjdXN0b21JbmRleE9iamVjdCldID0gcm93LmluZGV4X25hbWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZGJTY2hlbWEuaW5kZXhlcykgZGJTY2hlbWEuaW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgZGJTY2hlbWEuaW5kZXhlcy5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICBkYlNjaGVtYS5pbmRleF9uYW1lc1t0YXJnZXRdID0gcm93LmluZGV4X25hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKG51bGwsIGRiU2NoZW1hKTtcbiAgICB9KTtcbiAgfSxcblxuICBfY3JlYXRlX2luZGV4X3F1ZXJ5KHRhYmxlTmFtZSwgaW5kZXhOYW1lKSB7XG4gICAgbGV0IHF1ZXJ5O1xuICAgIGNvbnN0IGluZGV4RXhwcmVzc2lvbiA9IGluZGV4TmFtZS5yZXBsYWNlKC9bXCJcXHNdL2csICcnKS5zcGxpdCgvWygpXS9nKTtcbiAgICBpZiAoaW5kZXhFeHByZXNzaW9uLmxlbmd0aCA+IDEpIHtcbiAgICAgIGluZGV4RXhwcmVzc2lvblswXSA9IGluZGV4RXhwcmVzc2lvblswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcXVlcnkgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgJ0NSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIE9OIFwiJXNcIiAoJXMoXCIlc1wiKSk7JyxcbiAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICBpbmRleEV4cHJlc3Npb25bMF0sXG4gICAgICAgIGluZGV4RXhwcmVzc2lvblsxXSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXJ5ID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICdDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBPTiBcIiVzXCIgKFwiJXNcIik7JyxcbiAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICBpbmRleEV4cHJlc3Npb25bMF0sXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcXVlcnk7XG4gIH0sXG5cbiAgY3JlYXRlX2luZGV4ZXMoaW5kZXhlcywgY2FsbGJhY2spIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCB0YWJsZU5hbWUgPSBwcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG4gICAgYXN5bmMuZWFjaFNlcmllcyhpbmRleGVzLCAoaWR4LCBuZXh0KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IHRoaXMuX2NyZWF0ZV9pbmRleF9xdWVyeSh0YWJsZU5hbWUsIGlkeCk7XG4gICAgICB0aGlzLl9kcml2ZXIuZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKGVycikgbmV4dChidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLmRiaW5kZXhjcmVhdGUnLCBlcnIpKTtcbiAgICAgICAgZWxzZSBuZXh0KG51bGwsIHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9LCBjYWxsYmFjayk7XG4gIH0sXG5cbiAgX2NyZWF0ZV9jdXN0b21faW5kZXhfcXVlcnkodGFibGVOYW1lLCBjdXN0b21JbmRleCkge1xuICAgIGxldCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgJ0NSRUFURSBDVVNUT00gSU5ERVggSUYgTk9UIEVYSVNUUyBPTiBcIiVzXCIgKFwiJXNcIikgVVNJTkcgXFwnJXNcXCcnLFxuICAgICAgdGFibGVOYW1lLFxuICAgICAgY3VzdG9tSW5kZXgub24sXG4gICAgICBjdXN0b21JbmRleC51c2luZyxcbiAgICApO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKGN1c3RvbUluZGV4Lm9wdGlvbnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHF1ZXJ5ICs9ICcgV0lUSCBPUFRJT05TID0geyc7XG4gICAgICBPYmplY3Qua2V5cyhjdXN0b21JbmRleC5vcHRpb25zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgcXVlcnkgKz0gdXRpbC5mb3JtYXQoXCInJXMnOiAnJXMnLCBcIiwga2V5LCBjdXN0b21JbmRleC5vcHRpb25zW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBxdWVyeSA9IHF1ZXJ5LnNsaWNlKDAsIC0yKTtcbiAgICAgIHF1ZXJ5ICs9ICd9JztcbiAgICB9XG5cbiAgICBxdWVyeSArPSAnOyc7XG5cbiAgICByZXR1cm4gcXVlcnk7XG4gIH0sXG5cbiAgY3JlYXRlX2N1c3RvbV9pbmRleGVzKGN1c3RvbUluZGV4ZXMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgdGFibGVOYW1lID0gcHJvcGVydGllcy50YWJsZV9uYW1lO1xuICAgIGFzeW5jLmVhY2hTZXJpZXMoY3VzdG9tSW5kZXhlcywgKGlkeCwgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSB0aGlzLl9jcmVhdGVfY3VzdG9tX2luZGV4X3F1ZXJ5KHRhYmxlTmFtZSwgaWR4KTtcbiAgICAgIHRoaXMuX2RyaXZlci5leGVjdXRlX2RlZmluaXRpb25fcXVlcnkocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSBuZXh0KGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJpbmRleGNyZWF0ZScsIGVycikpO1xuICAgICAgICBlbHNlIG5leHQobnVsbCwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0sIGNhbGxiYWNrKTtcbiAgfSxcblxuICBkcm9wX2luZGV4ZXMoaW5kZXhlcywgY2FsbGJhY2spIHtcbiAgICBhc3luYy5lYWNoKGluZGV4ZXMsIChpZHgsIG5leHQpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gdXRpbC5mb3JtYXQoJ0RST1AgSU5ERVggSUYgRVhJU1RTIFwiJXNcIjsnLCBpZHgpO1xuICAgICAgdGhpcy5fZHJpdmVyLmV4ZWN1dGVfZGVmaW5pdGlvbl9xdWVyeShxdWVyeSwgbmV4dCk7XG4gICAgfSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYmluZGV4ZHJvcCcsIGVycikpO1xuICAgICAgZWxzZSBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9LFxuXG4gIGdldF9tdmlld3MoaW5kZXhTY2hlbWEsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3Qga2V5c3BhY2VOYW1lID0gcHJvcGVydGllcy5rZXlzcGFjZTtcbiAgICBjb25zdCB0YWJsZU5hbWUgPSBwcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG4gICAgY29uc3QgZGJTY2hlbWEgPSB7fTtcbiAgICBsZXQgcXVlcnkgPSAnU0VMRUNUIHZpZXdfbmFtZSxiYXNlX3RhYmxlX25hbWUsd2hlcmVfY2xhdXNlIEZST00gc3lzdGVtX3NjaGVtYS52aWV3cyBXSEVSRSBrZXlzcGFjZV9uYW1lPT87JztcblxuICAgIHRoaXMuX2RyaXZlci5leGVjdXRlX3F1ZXJ5KHF1ZXJ5LCBba2V5c3BhY2VOYW1lXSwgKGVyciwgcmVzdWx0Vmlld3MpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5kYnNjaGVtYXF1ZXJ5JywgZXJyKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IGluZGV4Vmlld05hbWVzID0gW107XG4gICAgICBpZiAoaW5kZXhTY2hlbWEuaW5kZXhfbmFtZXMpIHtcbiAgICAgICAgY29uc3QgaW5kZXhOYW1lcyA9IE9iamVjdC52YWx1ZXMoaW5kZXhTY2hlbWEuaW5kZXhfbmFtZXMpO1xuICAgICAgICBpbmRleFZpZXdOYW1lcyA9IGluZGV4TmFtZXMubWFwKCh2KSA9PiBgJHt2fV9pbmRleGApO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCByID0gMDsgciA8IHJlc3VsdFZpZXdzLnJvd3MubGVuZ3RoOyByKyspIHtcbiAgICAgICAgY29uc3Qgcm93ID0gcmVzdWx0Vmlld3Mucm93c1tyXTtcblxuICAgICAgICBpZiAocm93LnZpZXdfbmFtZSAmJiByb3cuYmFzZV90YWJsZV9uYW1lID09PSB0YWJsZU5hbWUgJiYgIWluZGV4Vmlld05hbWVzLmluY2x1ZGVzKHJvdy52aWV3X25hbWUpKSB7XG4gICAgICAgICAgaWYgKCFkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3cyA9IHt9O1xuICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudmlld19uYW1lXSA9IHtcbiAgICAgICAgICAgIHdoZXJlX2NsYXVzZTogcm93LndoZXJlX2NsYXVzZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGRiU2NoZW1hKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBxdWVyeSA9ICdTRUxFQ1QgKiBGUk9NIHN5c3RlbV9zY2hlbWEuY29sdW1ucyBXSEVSRSBrZXlzcGFjZV9uYW1lPT8gYW5kIHRhYmxlX25hbWUgSU4gPzsnO1xuXG4gICAgICBjb25zdCB2aWV3TmFtZXMgPSBPYmplY3Qua2V5cyhkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpO1xuICAgICAgdGhpcy5fZHJpdmVyLmV4ZWN1dGVfcXVlcnkocXVlcnksIFtrZXlzcGFjZU5hbWUsIHZpZXdOYW1lc10sIChlcnIxLCByZXN1bHRNYXRWaWV3cykgPT4ge1xuICAgICAgICBpZiAoZXJyMSkge1xuICAgICAgICAgIGNhbGxiYWNrKGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24uZGJzY2hlbWFxdWVyeScsIGVycjEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCByID0gMDsgciA8IHJlc3VsdE1hdFZpZXdzLnJvd3MubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICBjb25zdCByb3cgPSByZXN1bHRNYXRWaWV3cy5yb3dzW3JdO1xuXG4gICAgICAgICAgaWYgKCFkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLnNlbGVjdCkge1xuICAgICAgICAgICAgZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5zZWxlY3QgPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLnNlbGVjdC5wdXNoKHJvdy5jb2x1bW5fbmFtZSk7XG5cbiAgICAgICAgICBpZiAocm93LmtpbmQgPT09ICdwYXJ0aXRpb25fa2V5Jykge1xuICAgICAgICAgICAgaWYgKCFkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmtleSkge1xuICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmtleSA9IFtbXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0ua2V5WzBdW3Jvdy5wb3NpdGlvbl0gPSByb3cuY29sdW1uX25hbWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChyb3cua2luZCA9PT0gJ2NsdXN0ZXJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoIWRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0ua2V5KSB7XG4gICAgICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0ua2V5ID0gW1tdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5jbHVzdGVyaW5nX29yZGVyKSB7XG4gICAgICAgICAgICAgIGRiU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tyb3cudGFibGVfbmFtZV0uY2x1c3RlcmluZ19vcmRlciA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmtleVtyb3cucG9zaXRpb24gKyAxXSA9IHJvdy5jb2x1bW5fbmFtZTtcbiAgICAgICAgICAgIGlmIChyb3cuY2x1c3RlcmluZ19vcmRlciAmJiByb3cuY2x1c3RlcmluZ19vcmRlci50b0xvd2VyQ2FzZSgpID09PSAnZGVzYycpIHtcbiAgICAgICAgICAgICAgZGJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3Jvdy50YWJsZV9uYW1lXS5jbHVzdGVyaW5nX29yZGVyW3Jvdy5jb2x1bW5fbmFtZV0gPSAnREVTQyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkYlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbcm93LnRhYmxlX25hbWVdLmNsdXN0ZXJpbmdfb3JkZXJbcm93LmNvbHVtbl9uYW1lXSA9ICdBU0MnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGRiU2NoZW1hKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIF9jcmVhdGVfbWF0ZXJpYWxpemVkX3ZpZXdfcXVlcnkodGFibGVOYW1lLCB2aWV3TmFtZSwgdmlld1NjaGVtYSkge1xuICAgIGNvbnN0IHJvd3MgPSBbXTtcblxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdmlld1NjaGVtYS5zZWxlY3QubGVuZ3RoOyBrKyspIHtcbiAgICAgIGlmICh2aWV3U2NoZW1hLnNlbGVjdFtrXSA9PT0gJyonKSByb3dzLnB1c2godXRpbC5mb3JtYXQoJyVzJywgdmlld1NjaGVtYS5zZWxlY3Rba10pKTtcbiAgICAgIGVsc2Ugcm93cy5wdXNoKHV0aWwuZm9ybWF0KCdcIiVzXCInLCB2aWV3U2NoZW1hLnNlbGVjdFtrXSkpO1xuICAgIH1cblxuICAgIGNvbnN0IHdoZXJlQ2xhdXNlID0gdmlld1NjaGVtYS53aGVyZV9jbGF1c2UgfHwgcGFyc2VyLmdldF9tdmlld193aGVyZV9jbGF1c2UodGhpcy5fcHJvcGVydGllcy5zY2hlbWEsIHZpZXdTY2hlbWEpO1xuICAgIGNvbnN0IGNsYXVzZXMgPSBwYXJzZXIuZ2V0X3ByaW1hcnlfa2V5X2NsYXVzZXModmlld1NjaGVtYSk7XG5cbiAgICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KFxuICAgICAgJ0NSRUFURSBNQVRFUklBTElaRUQgVklFVyBJRiBOT1QgRVhJU1RTIFwiJXNcIiBBUyBTRUxFQ1QgJXMgRlJPTSBcIiVzXCIgV0hFUkUgJXMgUFJJTUFSWSBLRVkoKCVzKSVzKSVzOycsXG4gICAgICB2aWV3TmFtZSxcbiAgICAgIHJvd3Muam9pbignICwgJyksXG4gICAgICB0YWJsZU5hbWUsXG4gICAgICB3aGVyZUNsYXVzZSxcbiAgICAgIGNsYXVzZXMucGFydGl0aW9uS2V5Q2xhdXNlLFxuICAgICAgY2xhdXNlcy5jbHVzdGVyaW5nS2V5Q2xhdXNlLFxuICAgICAgY2xhdXNlcy5jbHVzdGVyaW5nT3JkZXJDbGF1c2UsXG4gICAgKTtcblxuICAgIHJldHVybiBxdWVyeTtcbiAgfSxcblxuICBjcmVhdGVfbXZpZXdzKG1hdGVyaWFsaXplZFZpZXdzLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIGNvbnN0IHRhYmxlTmFtZSA9IHByb3BlcnRpZXMudGFibGVfbmFtZTtcbiAgICBhc3luYy5lYWNoU2VyaWVzKE9iamVjdC5rZXlzKG1hdGVyaWFsaXplZFZpZXdzKSwgKHZpZXdOYW1lLCBuZXh0KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IHRoaXMuX2NyZWF0ZV9tYXRlcmlhbGl6ZWRfdmlld19xdWVyeShcbiAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICB2aWV3TmFtZSxcbiAgICAgICAgbWF0ZXJpYWxpemVkVmlld3Nbdmlld05hbWVdLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX2RyaXZlci5leGVjdXRlX2RlZmluaXRpb25fcXVlcnkocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSBuZXh0KGJ1aWxkRXJyb3IoJ21vZGVsLnRhYmxlY3JlYXRpb24ubWF0dmlld2NyZWF0ZScsIGVycikpO1xuICAgICAgICBlbHNlIG5leHQobnVsbCwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH0sIGNhbGxiYWNrKTtcbiAgfSxcblxuICBkcm9wX212aWV3cyhtdmlld3MsIGNhbGxiYWNrKSB7XG4gICAgYXN5bmMuZWFjaChtdmlld3MsICh2aWV3LCBuZXh0KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IHV0aWwuZm9ybWF0KCdEUk9QIE1BVEVSSUFMSVpFRCBWSUVXIElGIEVYSVNUUyBcIiVzXCI7Jywgdmlldyk7XG4gICAgICB0aGlzLl9kcml2ZXIuZXhlY3V0ZV9kZWZpbml0aW9uX3F1ZXJ5KHF1ZXJ5LCBuZXh0KTtcbiAgICB9LCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLm1hdHZpZXdkcm9wJywgZXJyKSk7XG4gICAgICBlbHNlIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG5cbiAgX2FwcGx5X2FsdGVyX29wZXJhdGlvbnMoYWx0ZXJPcGVyYXRpb25zLCBkYlNjaGVtYSwgbm9ybWFsaXplZE1vZGVsU2NoZW1hLCBub3JtYWxpemVkREJTY2hlbWEsIGNhbGxiYWNrKSB7XG4gICAgLy8gaXQgc2hvdWxkIGNyZWF0ZS9kcm9wIGluZGV4ZXMvY3VzdG9tX2luZGV4ZXMvbWF0ZXJpYWxpemVkX3ZpZXdzIHRoYXQgYXJlIGFkZGVkL3JlbW92ZWQgaW4gbW9kZWwgc2NoZW1hXG4gICAgLy8gcmVtb3ZlIGNvbW1vbiBpbmRleGVzL2N1c3RvbV9pbmRleGVzL21hdGVyaWFsaXplZF92aWV3cyBmcm9tIG5vcm1hbGl6ZWRNb2RlbFNjaGVtYSBhbmQgbm9ybWFsaXplZERCU2NoZW1hXG4gICAgLy8gdGhlbiBkcm9wIGFsbCByZW1haW5pbmcgaW5kZXhlcy9jdXN0b21faW5kZXhlcy9tYXRlcmlhbGl6ZWRfdmlld3MgZnJvbSBub3JtYWxpemVkREJTY2hlbWFcbiAgICAvLyBhbmQgYWRkIGFsbCByZW1haW5pbmcgaW5kZXhlcy9jdXN0b21faW5kZXhlcy9tYXRlcmlhbGl6ZWRfdmlld3MgZnJvbSBub3JtYWxpemVkTW9kZWxTY2hlbWFcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCB0YWJsZU5hbWUgPSBwcm9wZXJ0aWVzLnRhYmxlX25hbWU7XG4gICAgY29uc3QgYWRkZWRJbmRleGVzID0gXy5kaWZmZXJlbmNlKG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5pbmRleGVzLCBub3JtYWxpemVkREJTY2hlbWEuaW5kZXhlcyk7XG4gICAgY29uc3QgcmVtb3ZlZEluZGV4ZXMgPSBfLmRpZmZlcmVuY2Uobm9ybWFsaXplZERCU2NoZW1hLmluZGV4ZXMsIG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5pbmRleGVzKTtcbiAgICBjb25zdCByZW1vdmVkSW5kZXhOYW1lcyA9IFtdO1xuICAgIHJlbW92ZWRJbmRleGVzLmZvckVhY2goKHJlbW92ZWRJbmRleCkgPT4ge1xuICAgICAgcmVtb3ZlZEluZGV4TmFtZXMucHVzaChkYlNjaGVtYS5pbmRleF9uYW1lc1tyZW1vdmVkSW5kZXhdKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGFkZGVkQ3VzdG9tSW5kZXhlcyA9IF8uZmlsdGVyKFxuICAgICAgbm9ybWFsaXplZE1vZGVsU2NoZW1hLmN1c3RvbV9pbmRleGVzLFxuICAgICAgKG9iaikgPT4gKCFfLmZpbmQobm9ybWFsaXplZERCU2NoZW1hLmN1c3RvbV9pbmRleGVzLCBvYmopKSxcbiAgICApO1xuICAgIGNvbnN0IHJlbW92ZWRDdXN0b21JbmRleGVzID0gXy5maWx0ZXIoXG4gICAgICBub3JtYWxpemVkREJTY2hlbWEuY3VzdG9tX2luZGV4ZXMsXG4gICAgICAob2JqKSA9PiAoIV8uZmluZChub3JtYWxpemVkTW9kZWxTY2hlbWEuY3VzdG9tX2luZGV4ZXMsIG9iaikpLFxuICAgICk7XG4gICAgcmVtb3ZlZEN1c3RvbUluZGV4ZXMuZm9yRWFjaCgocmVtb3ZlZEluZGV4KSA9PiB7XG4gICAgICByZW1vdmVkSW5kZXhOYW1lcy5wdXNoKGRiU2NoZW1hLmluZGV4X25hbWVzW29iamVjdEhhc2gocmVtb3ZlZEluZGV4KV0pO1xuICAgIH0pO1xuXG4gICAgY29uc3QgYWRkZWRNYXRlcmlhbGl6ZWRWaWV3c05hbWVzID0gXy5maWx0ZXIoXG4gICAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkTW9kZWxTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKSxcbiAgICAgICh2aWV3TmFtZSkgPT4gKCFfLmlzRXF1YWwoXG4gICAgICAgIG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbdmlld05hbWVdLFxuICAgICAgICBub3JtYWxpemVkTW9kZWxTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3ZpZXdOYW1lXSxcbiAgICAgICkpLFxuICAgICk7XG5cbiAgICBjb25zdCByZW1vdmVkTWF0ZXJpYWxpemVkVmlld05hbWVzID0gXy5maWx0ZXIoXG4gICAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKSxcbiAgICAgICh2aWV3TmFtZSkgPT4gKCFfLmlzRXF1YWwoXG4gICAgICAgIG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbdmlld05hbWVdLFxuICAgICAgICBub3JtYWxpemVkTW9kZWxTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW3ZpZXdOYW1lXSxcbiAgICAgICkpLFxuICAgICk7XG5cbiAgICBjb25zdCBhZGRlZE1hdGVyaWFsaXplZFZpZXdzID0ge307XG4gICAgYWRkZWRNYXRlcmlhbGl6ZWRWaWV3c05hbWVzLmZvckVhY2goKHZpZXdOYW1lKSA9PiB7XG4gICAgICBhZGRlZE1hdGVyaWFsaXplZFZpZXdzW3ZpZXdOYW1lXSA9IG5vcm1hbGl6ZWRNb2RlbFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbdmlld05hbWVdO1xuICAgIH0pO1xuXG4gICAgLy8gcmVtb3ZlIGFsdGVyZWQgbWF0ZXJpYWxpemVkIHZpZXdzXG4gICAgaWYgKHJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3TmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IHV0aWwuZm9ybWF0KFxuICAgICAgICAnU2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIHJlbW92ZWQgbWF0ZXJpYWxpemVkX3ZpZXdzOiAlaiwgYXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRyb3AgdGhlbT8nLFxuICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgIHJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3TmFtZXMsXG4gICAgICApO1xuICAgICAgY29uc3QgcGVybWlzc2lvbiA9IHRoaXMuX2NvbmZpcm1fbWlncmF0aW9uKG1lc3NhZ2UpO1xuICAgICAgaWYgKHBlcm1pc3Npb24gIT09ICd5Jykge1xuICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLnNjaGVtYW1pc21hdGNoJywgdGFibGVOYW1lLCAnbWlncmF0aW9uIHN1c3BlbmRlZCwgcGxlYXNlIGFwcGx5IHRoZSBjaGFuZ2UgbWFudWFsbHknKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmRyb3BfbXZpZXdzKHJlbW92ZWRNYXRlcmlhbGl6ZWRWaWV3TmFtZXMsIChlcnIyKSA9PiB7XG4gICAgICBpZiAoZXJyMikge1xuICAgICAgICBjYWxsYmFjayhlcnIyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVtb3ZlZEluZGV4TmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICAgJ1NjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyByZW1vdmVkIGluZGV4ZXM6ICVqLCBhcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZHJvcCB0aGVtPycsXG4gICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgIHJlbW92ZWRJbmRleE5hbWVzLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBwZXJtaXNzaW9uID0gdGhpcy5fY29uZmlybV9taWdyYXRpb24obWVzc2FnZSk7XG4gICAgICAgIGlmIChwZXJtaXNzaW9uICE9PSAneScpIHtcbiAgICAgICAgICBjYWxsYmFjayhidWlsZEVycm9yKCdtb2RlbC50YWJsZWNyZWF0aW9uLnNjaGVtYW1pc21hdGNoJywgdGFibGVOYW1lLCAnbWlncmF0aW9uIHN1c3BlbmRlZCwgcGxlYXNlIGFwcGx5IHRoZSBjaGFuZ2UgbWFudWFsbHknKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHJlbW92ZSBhbHRlcmVkIGluZGV4ZXMgYnkgaW5kZXggbmFtZVxuICAgICAgdGhpcy5kcm9wX2luZGV4ZXMocmVtb3ZlZEluZGV4TmFtZXMsIChlcnIzKSA9PiB7XG4gICAgICAgIGlmIChlcnIzKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyMyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm93IGFwcGx5IGFsdGVyT3BlcmF0aW9ucyBoZXJlXG4gICAgICAgIGFzeW5jLmVhY2hTZXJpZXMoYWx0ZXJPcGVyYXRpb25zLCAoYWx0ZXJPcGVyYXRpb24sIG5leHQpID0+IHtcbiAgICAgICAgICBjb25zdCBwZXJtaXNzaW9uID0gdGhpcy5fY29uZmlybV9taWdyYXRpb24oYWx0ZXJPcGVyYXRpb24ubWVzc2FnZSk7XG4gICAgICAgICAgaWYgKHBlcm1pc3Npb24gIT09ICd5Jykge1xuICAgICAgICAgICAgY2FsbGJhY2soYnVpbGRFcnJvcignbW9kZWwudGFibGVjcmVhdGlvbi5zY2hlbWFtaXNtYXRjaCcsIHRhYmxlTmFtZSwgJ21pZ3JhdGlvbiBzdXNwZW5kZWQsIHBsZWFzZSBhcHBseSB0aGUgY2hhbmdlIG1hbnVhbGx5JykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFsdGVyX3RhYmxlKGFsdGVyT3BlcmF0aW9uLm9wZXJhdGlvbiwgYWx0ZXJPcGVyYXRpb24uZmllbGROYW1lLCBhbHRlck9wZXJhdGlvbi50eXBlLCBuZXh0KTtcbiAgICAgICAgfSwgKGVycjQpID0+IHtcbiAgICAgICAgICBpZiAoZXJyNCkge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyNCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gYWRkIGFsdGVyZWQgaW5kZXhlc1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbmVzdGVkLWNhbGxiYWNrc1xuICAgICAgICAgIHRoaXMuY3JlYXRlX2luZGV4ZXMoYWRkZWRJbmRleGVzLCAoZXJyNSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycjUpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyNSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWRkIGFsdGVyZWQgY3VzdG9tIGluZGV4ZXNcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbmVzdGVkLWNhbGxiYWNrc1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVfY3VzdG9tX2luZGV4ZXMoYWRkZWRDdXN0b21JbmRleGVzLCAoZXJyNikgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyNikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycjYpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGFkZCBhbHRlcmVkIG1hdGVyaWFsaXplZF92aWV3c1xuICAgICAgICAgICAgICB0aGlzLmNyZWF0ZV9tdmlld3MoYWRkZWRNYXRlcmlhbGl6ZWRWaWV3cywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgaW5pdF9hbHRlcl9vcGVyYXRpb25zKG1vZGVsU2NoZW1hLCBkYlNjaGVtYSwgbm9ybWFsaXplZE1vZGVsU2NoZW1hLCBub3JtYWxpemVkREJTY2hlbWEsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgdGFibGVOYW1lID0gcHJvcGVydGllcy50YWJsZV9uYW1lO1xuICAgIGNvbnN0IGFsdGVyT3BlcmF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IGRpZmZlcmVuY2VzID0gZGVlcERpZmYobm9ybWFsaXplZERCU2NoZW1hLmZpZWxkcywgbm9ybWFsaXplZE1vZGVsU2NoZW1hLmZpZWxkcyk7XG4gICAgbGV0IGRyb3BwZWRGaWVsZHMgPSBmYWxzZTtcbiAgICBhc3luYy5lYWNoU2VyaWVzKGRpZmZlcmVuY2VzLCAoZGlmZiwgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgZmllbGROYW1lID0gZGlmZi5wYXRoWzBdO1xuICAgICAgaWYgKGRpZmYua2luZCA9PT0gJ04nKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgICAnU2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIGFkZGVkIGZpZWxkIFwiJXNcIiwgYXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGFsdGVyIHRvIGFkZCB0aGUgZmllbGQ/JyxcbiAgICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICApO1xuICAgICAgICBhbHRlck9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgb3BlcmF0aW9uOiAnQUREJyxcbiAgICAgICAgICB0eXBlOiBwYXJzZXIuZXh0cmFjdF9hbHRlcmVkX3R5cGUobm9ybWFsaXplZE1vZGVsU2NoZW1hLCBkaWZmKSxcbiAgICAgICAgfSk7XG4gICAgICAgIG5leHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRpZmYua2luZCA9PT0gJ0QnKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgICAnU2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIHJlbW92ZWQgZmllbGQgXCIlc1wiLCBhbGwgZGF0YSBpbiB0aGUgZmllbGQgd2lsbCBsb3N0LCBhcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gYWx0ZXIgdG8gZHJvcCB0aGUgZmllbGQ/JyxcbiAgICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICApO1xuICAgICAgICBhbHRlck9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgb3BlcmF0aW9uOiAnRFJPUCcsXG4gICAgICAgIH0pO1xuICAgICAgICBkcm9wcGVkRmllbGRzID0gdHJ1ZTtcbiAgICAgICAgbm9ybWFsaXplci5yZW1vdmVfZGVwZW5kZW50X3ZpZXdzX2Zyb21fbm9ybWFsaXplZF9zY2hlbWEobm9ybWFsaXplZERCU2NoZW1hLCBkYlNjaGVtYSwgZmllbGROYW1lKTtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGlmZi5raW5kID09PSAnRScpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGFsdGVyIGZpZWxkIHR5cGUgaXMgcG9zc2libGUsIG90aGVyd2lzZSB0cnkgRCBhbmQgdGhlbiBOXG4gICAgICAgIGlmIChkaWZmLnBhdGhbMV0gPT09ICd0eXBlJykge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIGZpZWxkIHBhcnQgb2YgcHJpbWFyeSBrZXlcbiAgICAgICAgICBpZiAobm9ybWFsaXplZERCU2NoZW1hLmtleVswXS5pbmNsdWRlcyhmaWVsZE5hbWUpIHx8IG5vcm1hbGl6ZWREQlNjaGVtYS5rZXkuaW5kZXhPZihmaWVsZE5hbWUpID4gMCkge1xuICAgICAgICAgICAgLy8gYWx0ZXIgZmllbGQgdHlwZSBpbXBvc3NpYmxlXG4gICAgICAgICAgICBuZXh0KG5ldyBFcnJvcignYWx0ZXJfaW1wb3NzaWJsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFsndGV4dCcsICdhc2NpaScsICdiaWdpbnQnLCAnYm9vbGVhbicsICdkZWNpbWFsJyxcbiAgICAgICAgICAgICdkb3VibGUnLCAnZmxvYXQnLCAnaW5ldCcsICdpbnQnLCAndGltZXN0YW1wJywgJ3RpbWV1dWlkJyxcbiAgICAgICAgICAgICd1dWlkJywgJ3ZhcmNoYXInLCAndmFyaW50J10uaW5jbHVkZXMoZGlmZi5saHMpICYmIGRpZmYucmhzID09PSAnYmxvYicpIHtcbiAgICAgICAgICAgIC8vIGFsdGVyIGZpZWxkIHR5cGUgcG9zc2libGVcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB1dGlsLmZvcm1hdChcbiAgICAgICAgICAgICAgJ1NjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyBuZXcgdHlwZSBmb3IgZmllbGQgXCIlc1wiLCBhcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gYWx0ZXIgdG8gdXBkYXRlIHRoZSBmaWVsZCB0eXBlPycsXG4gICAgICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGFsdGVyT3BlcmF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICBvcGVyYXRpb246ICdBTFRFUicsXG4gICAgICAgICAgICAgIHR5cGU6IGRpZmYucmhzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChkaWZmLmxocyA9PT0gJ2ludCcgJiYgZGlmZi5yaHMgPT09ICd2YXJpbnQnKSB7XG4gICAgICAgICAgICAvLyBhbHRlciBmaWVsZCB0eXBlIHBvc3NpYmxlXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICdTY2hlbWEgZm9yIHRhYmxlIFwiJXNcIiBoYXMgbmV3IHR5cGUgZm9yIGZpZWxkIFwiJXNcIiwgYXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGFsdGVyIHRvIHVwZGF0ZSB0aGUgZmllbGQgdHlwZT8nLFxuICAgICAgICAgICAgICB0YWJsZU5hbWUsXG4gICAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBhbHRlck9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgb3BlcmF0aW9uOiAnQUxURVInLFxuICAgICAgICAgICAgICB0eXBlOiBkaWZmLnJocyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGlmZi5saHMgPT09ICd0aW1ldXVpZCcgJiYgZGlmZi5yaHMgPT09ICd1dWlkJykge1xuICAgICAgICAgICAgLy8gYWx0ZXIgZmllbGQgdHlwZSBwb3NzaWJsZVxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgICAnU2NoZW1hIGZvciB0YWJsZSBcIiVzXCIgaGFzIG5ldyB0eXBlIGZvciBmaWVsZCBcIiVzXCIsIGFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBhbHRlciB0byB1cGRhdGUgdGhlIGZpZWxkIHR5cGU/JyxcbiAgICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYWx0ZXJPcGVyYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgIG9wZXJhdGlvbjogJ0FMVEVSJyxcbiAgICAgICAgICAgICAgdHlwZTogZGlmZi5yaHMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYWx0ZXIgdHlwZSBpbXBvc3NpYmxlXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICAgICAgICdTY2hlbWEgZm9yIHRhYmxlIFwiJXNcIiBoYXMgbmV3IHR5cGUgZm9yIGZpZWxkIFwiJXNcIiwgYWxsIGRhdGEgaW4gdGhlIGZpZWxkIHdpbGwgYmUgbG9zdCwgYXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRyb3AgdGhlIGZpZWxkICYgcmVjcmVhdGUgaXQ/JyxcbiAgICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYWx0ZXJPcGVyYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICBmaWVsZE5hbWUsXG4gICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgIG9wZXJhdGlvbjogJ0RST1AnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbHRlck9wZXJhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgICAgb3BlcmF0aW9uOiAnQUREJyxcbiAgICAgICAgICAgICAgdHlwZTogcGFyc2VyLmV4dHJhY3RfYWx0ZXJlZF90eXBlKG5vcm1hbGl6ZWRNb2RlbFNjaGVtYSwgZGlmZiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRyb3BwZWRGaWVsZHMgPSB0cnVlO1xuICAgICAgICAgICAgbm9ybWFsaXplci5yZW1vdmVfZGVwZW5kZW50X3ZpZXdzX2Zyb21fbm9ybWFsaXplZF9zY2hlbWEobm9ybWFsaXplZERCU2NoZW1hLCBkYlNjaGVtYSwgZmllbGROYW1lKTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYWx0ZXIgdHlwZSBpbXBvc3NpYmxlXG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHV0aWwuZm9ybWF0KFxuICAgICAgICAgICAgJ1NjaGVtYSBmb3IgdGFibGUgXCIlc1wiIGhhcyBuZXcgdHlwZSBmb3IgZmllbGQgXCIlc1wiLCBhbGwgZGF0YSBpbiB0aGUgZmllbGQgd2lsbCBiZSBsb3N0LCBhcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZHJvcCB0aGUgZmllbGQgJiByZWNyZWF0ZSBpdD8nLFxuICAgICAgICAgICAgdGFibGVOYW1lLFxuICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYWx0ZXJPcGVyYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgZmllbGROYW1lLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIG9wZXJhdGlvbjogJ0RST1AnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFsdGVyT3BlcmF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIGZpZWxkTmFtZSxcbiAgICAgICAgICAgIG9wZXJhdGlvbjogJ0FERCcsXG4gICAgICAgICAgICB0eXBlOiBwYXJzZXIuZXh0cmFjdF9hbHRlcmVkX3R5cGUobm9ybWFsaXplZE1vZGVsU2NoZW1hLCBkaWZmKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkcm9wcGVkRmllbGRzID0gdHJ1ZTtcbiAgICAgICAgICBub3JtYWxpemVyLnJlbW92ZV9kZXBlbmRlbnRfdmlld3NfZnJvbV9ub3JtYWxpemVkX3NjaGVtYShub3JtYWxpemVkREJTY2hlbWEsIGRiU2NoZW1hLCBmaWVsZE5hbWUpO1xuICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG5leHQoKTtcbiAgICB9LCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkcm9wcGVkRmllbGRzICYmIHRoaXMuX2VzX2J1aWxkZXIpIHtcbiAgICAgICAgY29uc3QgaW5kZXhOYW1lID0gYCR7cHJvcGVydGllcy5rZXlzcGFjZX1fJHtwcm9wZXJ0aWVzLnRhYmxlX25hbWV9YDtcbiAgICAgICAgdGhpcy5fZXNfYnVpbGRlci5kZWxldGVfaW5kZXgoaW5kZXhOYW1lLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fYXBwbHlfYWx0ZXJfb3BlcmF0aW9ucyhhbHRlck9wZXJhdGlvbnMsIGRiU2NoZW1hLCBub3JtYWxpemVkTW9kZWxTY2hlbWEsIG5vcm1hbGl6ZWREQlNjaGVtYSwgY2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fYXBwbHlfYWx0ZXJfb3BlcmF0aW9ucyhhbHRlck9wZXJhdGlvbnMsIGRiU2NoZW1hLCBub3JtYWxpemVkTW9kZWxTY2hlbWEsIG5vcm1hbGl6ZWREQlNjaGVtYSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZUJ1aWxkZXI7XG4iXX0=